"""

"""

import random
import math

def test():
    
    print("--ПОДГОТОВКА КЛЮЧЕЙ--")
    # выбираю два простых числа
    p = 3
    q = 7
    print("Простые числа", p, q)
    # вычисляем модуль
    n = p * q
    # функцию Эйлера: φ=(p-1)×(q-1)
    eilera = (p - 1) * (q - 1) 
    # Выбираем число e, отвечающее следующим критериям:
    # 1) оно должно быть простое
    # 2) оно должно быть меньше eilera
    # 3) оно должно быть взаимно простое с eilera
    e = 5
    # Теперь пара чисел {e, n} — это мой открытый ключ
    print("Oткрытый ключ {", e, n, "}")
    # Мне нужно вычислить число d, обратное е по модулю φ. 
    # То есть остаток от деления по модулю φ произведения d×e должен быть равен 1. 
    # Запишем это в обозначениях, принятых во многих языках программирования: (d×е)%φ=1. 
    # Или (d×e)%eilera = 1 или d*e - eilera*multiplier = 1 или d = (1 + eilera*multiplier) / e

    for multiplier in range(3,100):
        d = (1 + eilera * multiplier) / e
        if d == int(d):
            d = int(d)
            break

    # Пара {d, n} — это секретный ключ, его я оставляю у себя. 
    # Его нельзя сообщать никому. Только обладатель секретного ключа может расшифровать то, 
    # что было зашифровано открытым ключом.
    print("Закрытый ключ {", d, n, "}")

    print("--ШИФРОВАНИЕ--")
    # Теперь пришла ваша очередь шифровать ваше сообщение. 
    # Допустим, ваше сообщение это число 19.
    number = 19 
    print("Сообщение", number)
    # Кроме него у вас уже есть мой открытый ключ: {e, n}
    # Возводите ваше сообщение в степень e по модулю n. 
    data = int(math.pow(number, e) % n)
    print("Шифрованое сообщение", data)

    print("--РАСШИФРОВКА--")
    # получил данные data, и у меня имеется закрытый ключ {d, n}
    # делаю операцию, очень похожую на вашу, но вместо e использую d
    result = int(math.pow(data, d) % n)
    print("Результат", result)
